/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author io366020
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.awt.*;

public class TransfertDlg extends javax.swing.JDialog {

    
    //attributs
    
     private LesJoueurs lj; //ensemble des joueurs, pour initialiser la liste déroulante avec les pseudos des joueurs
    private int indj; //indice joueur courant
    
    // private Transfert tc; // cette classe sera étudiée aprés
    
    private boolean ok; // indicateur pour savoir le transfert a bien été effectué.
    private int indjs; //indice du joueur sélectionné dans la liste déroulante
    
    private String fs; //famille du personnage sélectionné en cliquant sur un des personnages du joueur sélectionné
    
    
    /**
     * Creates new form TransfertDlg
     */
    //construcetur en parametre et initilisation des attributs
    public TransfertDlg(java.awt.Frame parent, boolean modal, LesJoueurs lj, int indj) {
        super(parent, modal);
        initComponents();
        this.lj = lj; //on stocke le paramètre LesJoueurs lj dans l'attribut lj de la classe TransfertDlg
        this.indj = indj; //on stocke le paramètre int indj dans l'attribut indj de la classe TransfertDlg
        // this.tc=null;
        this.ok = false;
        this.fs = null;
        initCombo(); // méthode pour remplir la liste déroulante
        this.indjs = 0; // le premier élément de la JComboBox est sélectionné par défaut
        Message.setText("Le joueur "+lj.getJoueur(indj).getNom()+" a obtenu une famille complète");
        Infos.setText("Personnages de "+lj.getJoueur(indj).getNom()+" : \n"+lj.getJoueur(indj).getPaquet());
    }
    
    //Accesseurs en lecture
    private boolean getOk(){
        return this.ok;
    }
    
    /*private Transfert getTransfert(){
        return this.tc;
    }*/
    
    //Méthodes de l'instance de la classe TransfertDlg
    private void initCombo(){
        for(int i = 0; i < this.lj.getNbJoueurs(); i++){
            ComboJoueurs.addItem(this.lj.getJoueur(i).getNom());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanneauG = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        Message = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ComboJoueurs = new javax.swing.JComboBox<String>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Infos = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        Transfert = new javax.swing.JButton();
        Fermer = new javax.swing.JButton();
        PanneauD = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 800));
        getContentPane().setLayout(new java.awt.GridLayout(1, 3));

        PanneauG.setPreferredSize(new java.awt.Dimension(250, 800));
        PanneauG.setLayout(new java.awt.GridLayout(1, 1));
        getContentPane().add(PanneauG);

        jPanel2.setPreferredSize(new java.awt.Dimension(300, 800));
        jPanel2.setLayout(new java.awt.GridLayout(2, 1));

        jPanel3.setPreferredSize(new java.awt.Dimension(200, 150));
        jPanel3.setLayout(new java.awt.GridLayout(4, 1));
        jPanel3.add(Message);
        jPanel3.add(jLabel2);

        jLabel3.setText("Selectionnez le joueur que vous voulez voir les cartes :");
        jPanel3.add(jLabel3);

        ComboJoueurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboJoueursActionPerformed(evt);
            }
        });
        jPanel3.add(ComboJoueurs);

        jPanel2.add(jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        Infos.setColumns(20);
        Infos.setRows(5);
        jScrollPane1.setViewportView(Infos);

        jPanel4.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.GridLayout(1, 2));

        Transfert.setText("Transfert");
        jPanel5.add(Transfert);

        Fermer.setText("Fermer");
        Fermer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FermerActionPerformed(evt);
            }
        });
        jPanel5.add(Fermer);

        jPanel4.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel2.add(jPanel4);

        getContentPane().add(jPanel2);

        PanneauD.setPreferredSize(new java.awt.Dimension(250, 800));
        PanneauD.setLayout(new java.awt.GridLayout(1, 1));
        getContentPane().add(PanneauD);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //gestionnaire de la comboBox permettant de selection le joueur selectionnée
    private void ComboJoueursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboJoueursActionPerformed
        // TODO add your handling code here:
        //on récupère l'indice de l'élément de la JcomboBox qui est sélectionné
        this.indjs = ComboJoueurs.getSelectedIndex();
        //on vérifie s'il y a bien un élément qui est sélectionné
        if (indjs != -1){
            //on test si les indices indjs et indj sont les mêmes 
            
            if (this.indjs == this.indj) {
                //on demande à l'utilisateur de sélectionner un autre joueur dans la JComboBox
                Infos.setText("Sélectionnez un joueur différent du joueur courant !");
                //suppression de tous les composants du JPanel PanneauG
                PanneauG.removeAll();
                //ré-affichage du JPanel PanneauG
                PanneauG.repaint();
            }
            else {
                //on affiche dans la zone d'édition Infos les informations du joueur sélectionné dans la JComboBox
                Infos.setText("\nJoueur sélectionné: "+this.lj.getJoueur(this.indjs).toString());
                initPanneau();
                affichePanneau();
            }
        }
    }//GEN-LAST:event_ComboJoueursActionPerformed

    //gestionnaire qui permet de fermer la boite de dialogue
    private void FermerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FermerActionPerformed
        // TODO add your handling code here:
        this.setVisible(false); //ferme l'application
        this.dispose();
    }//GEN-LAST:event_FermerActionPerformed

    //methode panneau
    public void initPanneau(){
         
        PanneauG.removeAll();//on vide le contenu du JPanel PanneauG
        
        this.repaint();//on ré-affiche la JDialog TransfertDlg 
        
        LesPersonnages lcs = this.lj.getJoueur(this.indjs).getPaquet();// on récupère dans une variable lcs de type LesPersonnages le paquet du joueur sélectionné

        
        int t = lcs.getTaille();
        int n = 1+(t-1)/4;
        PanneauG.setLayout(new java.awt.GridLayout(4, n));
        
        for(int i = 0; i < t; i++){
            JButton jb = new JButton();
            
            jb.setName(lcs.getPerso(i).getFamille());
            
            jb.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt){
                    boutonActionPerformed(evt);
                }
            });
            
            PanneauG.add(jb);
        }
        this.pack();
    }
    
    //methode qui permet d'affiche dans le panneau
    public void affichePanneau(){
        JButton jb;
        LesPersonnages lp = this.lj.getJoueur(this.indjs).getPaquet();
        
        for(int i = 0; i < lp.getTaille(); i++){
            jb = (JButton)PanneauG.getComponent(i);
            Image img = lp.getPerso(i).getPhoto().getScaledInstance(jb.getWidth(), jb.getHeight(), Image.SCALE_SMOOTH);
            jb.setIcon(new ImageIcon(img));
        }
    }
    
    //gestionnaire bouton
    private void boutonActionPerformed(ActionEvent evt)
    {
        //on récupère le paquet du joueur sélectionné dans la JComboBox que l'on stocke dans une variable lp de type LesPersonnages
        LesPersonnages lp = lj.getJoueur(indjs).getPaquet();
        //on récupère la taille du paquet de type int que l'on stocke dans une variable t
        int t = lp.getTaille();
        //on récupère le bouton qui a déclenché l'évènement que l'on stocke dans une variable bt
        JButton bt=(JButton)evt.getSource();
        //on stocke le nom du bouton bt dans notre attribut fs
        this.fs = bt.getName(); // la propriété Name, contient ici le nom du personnage affiché sur le bouton
        for(int i = 0; i < t; i++) {
            //on récupère chaque bouton du JPanel PanneauG que l'on stocke dans une variable b
            JButton b = (JButton)(PanneauG.getComponent(i));
            //on compare le nom de chaque bouton (correspondant à un nom de famille de Personnage) de JPanel PanneauG avec celui du bouton qui a déclenché l'évènement 
            if (b.getName().equals(fs))
                //si on trouve un bouton qui vérifie cette condition, on modifie l'effet de sa bordure
                b.setBorder(BorderFactory.createMatteBorder(10, 10, 10, 10, new java.awt.Color(255, 0, 0)));
            else
                b.setBorder(null);
        }
        //on stocke dans une variable lps de type LesPersonnages tous les Personnages du Joueur sélectionné dans la JComboBox
        //et dont le nom de famille correspond à celui du bouton ayant déclenché l'évènement
        LesPersonnages lps = lp.getPersosFamille(fs);
        //on affiche dans la zone d'édition Infos le nombre de cartes que le Joueur courant peut récupérer
        Infos.setText("Vous pouvez récupérer "+lps.getTaille()+" personnages : \n"+lps);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransfertDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransfertDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransfertDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransfertDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TransfertDlg dialog = new TransfertDlg(new javax.swing.JFrame(), true, null, 0);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboJoueurs;
    private javax.swing.JButton Fermer;
    private javax.swing.JTextArea Infos;
    private javax.swing.JLabel Message;
    private javax.swing.JPanel PanneauD;
    private javax.swing.JPanel PanneauG;
    private javax.swing.JButton Transfert;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
   
}
